#file: noinspection YAMLSchemaValidation
name: Publish NPM Package
on:
  push:
    branches:
      - main
env:
  GH_TOKEN: ${{ github.token }}
jobs:
  publish-npm:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    environment:
      name: production
      url: "https://www.npmjs.com/package/@solidchain/badge-buddy-common/v/${{ steps.package-version.outputs.prop }}"
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v3
        with:
          node-version-file: 'package.json'
      - uses: pnpm/action-setup@v2
      - run: git config user.name "github-action[bot]"
      - run: git config user.email "<>"
      - run: pnpm install
      - run: pnpm test
      - run: git fetch
      - name: Retrieve Package Version
        id: prerelease-version
        uses: notiz-dev/github-action-json-property@v0.2.0
        with:
          path: 'package.json'
          prop_path: 'version'
      - name: Remove prerelease tags
        run: git tag -d $(git tag -l "v$(node -e "console.log('${{steps.prerelease-version.outputs.prop}}'.split('-')[0]);")-*")
      - name: Tag release
        run: npx standard-version > changes.md
      - name: Retrieve Package Version
        id: package-version
        uses: notiz-dev/github-action-json-property@v0.2.0
        with:
          path: 'package.json'
          prop_path: 'version'
      - run: git push --follow-tags
      - run: pnpm build
      - run: node -e "require('./dist/index.js')['parseChangesFile']();"
      - uses: JS-DevTools/npm-publish@v2
        with:
          token: ${{ secrets.NPM_PUBLISH_TOKEN }}
          access: 'public'
          tag: 'latest'
      - uses: vimtor/action-zip@v1
        with:
          files: dist/ CHANGELOG.md LICENSE.md README.md package.json
          dest: dist.zip
      - run: gh release create -F release.md -t "v${{ steps.package-version.outputs.prop } Release" --verify-tag v${{ steps.package-version.outputs.prop }} dist.zip
      - run: git fetch
      - run: git pull --tags
      - run: git checkout dev
      - run: git merge --no-ff main -m "sync branch main v${{ steps.package-version.outputs.prop }} into dev" | exit 0
      - run: git push
