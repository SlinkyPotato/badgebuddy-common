#file: noinspection YAMLSchemaValidation
name: Publish NPM Package
on:
  push:
    branches:
      - main
env:
  GH_TOKEN: ${{ github.token }}
jobs:
  publish-npm:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    environment:
      name: production
      url: "https://www.npmjs.com/package/@badgebuddy/common/v/${{ steps.package.outputs.PACKAGE_VERSION }}"
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: pnpm/action-setup@v2
      - uses: actions/setup-node@v3
        with:
          node-version-file: 'package.json'
          cache: 'pnpm'
          cache-dependency-path: 'pnpm-lock.yaml'
      - run: git config user.name "github-action[bot]"
      - run: git config user.email "<>"
      - run: pnpm install --frozen-lockfile
      - name: Retrieve pre-release package.json
        id: pre-release
        run: |
          echo PRERELEASE_VERSION=$(node -e "console.log(require('./package.json').version)") >> "$GITHUB_OUTPUT"
      - name: Remove prerelease tags
        run: git tag -d $(git tag -l "v$(node -e "console.log('${{ steps.pre-release.outputs.PRERELEASE_VERSION }}'.split('-')[0]);")-*")
      - run: pnpm standard-version --dry-run > changes.md | exit 0
      - run: pnpm standard-version
      - run: pnpm build
      - run: pnpm lint
      - run: pnpm test
      - name: Retrieve package.json
        id: package
        run: |
          echo PACKAGE_VERSION=$(node -e "console.log(require('./package.json').version)") >> "$GITHUB_OUTPUT"
      - run: git push --follow-tags
      - run: node -e "require('./dist/index.js')['parseReleaseUtil']();"
      - uses: JS-DevTools/npm-publish@v3
        with:
          token: ${{ secrets.NPM_PUBLISH_TOKEN }}
          access: 'public'
          tag: 'latest'
      - uses: vimtor/action-zip@v1
        with:
          files: dist/ CHANGELOG.md LICENSE.md README.md package.json
          dest: dist.zip
      - run: gh release create -F release.md --verify-tag v${{ steps.package.outputs.PACKAGE_VERSION }} dist.zip
      - run: git checkout dev
      - run: git merge --no-ff main -m "sync branch main v${{ steps.package.outputs.PACKAGE_VERSION }} into dev" | exit 0
      - run: git push
